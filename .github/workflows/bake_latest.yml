name: Build Latest Release

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  bake-latest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Update Build
        shell: pwsh
        env:
          commitmessage: ${{ github.event.head_commit.message }}
        run: |
            if ($ENV:commitmessage -like "*docs*") {
              Write-Host "Documentation only update. Skipping build version change."
              Write-Output "ReleaseUpdated=false" | Out-File -FilePath $ENV:GITHUB_ENV -Encoding utf8 -Append
            } else {
              $CurrentBuild = Get-Content -Path ./.github/build.json | ConvertFrom-Json
              $CurrentVersion = [Version]$CurrentBuild.Version
              $NewVersion = [Version]::new($CurrentVersion.Major,$CurrentVersion.Minor+1)
              $Build = @{
                'SHA'    = $ENV:GITHUB_SHA
                'Branch' = $(git rev-parse --abbrev-ref HEAD)
                'Version' = $($NewVersion.ToString())
              }
              Set-Content -Path .github/build.json -Value $($Build | ConvertTo-Json)

              Write-Host "Updating CHANGELOG.."
              $ChangeHistory = Get-Content -Path './CHANGELOG.md' -Raw
              $ReleaseNotes = Get-Content -Path './RELEASE.md' -Raw
              $ModuleVersionString = "## $($NewVersion.ToString())"
              Set-Content -Path './CHANGELOG.md' -Value ($ModuleVersionString + "`r`n" + $ReleaseNotes + "`r`n`r`n" + $ChangeHistory)
              Copy-Item './CHANGELOG.md' './docs/Change Log.md' -Force

              Write-Output "Version=$($NewVersion.ToString())" | Out-File -FilePath $ENV:GITHUB_ENV -Encoding utf8 -Append
              Write-Output "ReleaseNotes<<EOF" | Out-File -FilePath $ENV:GITHUB_ENV -Encoding utf8 -Append
              Write-Output "$($ReleaseNotes)" | Out-File -FilePath $ENV:GITHUB_ENV -Encoding utf8 -Append
              Write-Output "EOF" | Out-File -FilePath $ENV:GITHUB_ENV -Encoding utf8 -Append
              Write-Output "ReleaseUpdated=true" | Out-File -FilePath $ENV:GITHUB_ENV -Encoding utf8 -Append
            }

      - name: Set up QEMU
        if: ${{ env.ReleaseUpdated == 'true' }}
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Set up Docker Buildx
        if: ${{ env.ReleaseUpdated == 'true' }}
        uses: docker/setup-buildx-action@v1.6.0

      - name: Login to GitHub Container Registry
        if: ${{ env.ReleaseUpdated == 'true' }}
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        if: ${{ env.ReleaseUpdated == 'true' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Docker/Dockerfile
          push: true
          tags: ghcr.io/tehmuffinmoo/qsaf:latest
          outputs: type=docker,dest=/tmp/qsaf.tar
          build-args: |
            BUILD_COMMIT=${{ github.sha }}
            BUILD_BRANCH=${{ github.ref_name }}

      - name: Create Release
        if: ${{ env.ReleaseUpdated == 'true' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_ACTIONS }}
        with:
          tag_name: v${{ env.Version }}
          release_name: Release v${{ env.Version }}
          body: ${{ env.ReleaseNotes }}
          prerelease: false
          draft: false
          makeLatest: true

      - name: Upload Tarball Asset
        if: ${{ env.ReleaseUpdated == 'true' }}
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: /tmp/qsaf.tar
          asset_name: qsaf.tar
          asset_content_type: application/tar

      - name: Update Repository
        if: ${{ env.ReleaseUpdated == 'true' }}
        run: |
          git config --global user.name ${{ github.actor }}
          git config --global user.password ${{ secrets.GIT_ACTIONS }}
          git config --global user.email 'mat.cox@tmmn.uk'
          git add .
          git status
          if ! git diff-index --quiet HEAD; then
            git commit -m "Update Container to v${{ env.Version }}"
            git push
          fi